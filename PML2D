"""
Wave Equation 2D with PML:

"""

from __future__ import print_function
from fenics import *
import matplotlib.pyplot as plt
import numpy as np
import math
from mshr import *

T = 1.5    # final time
num_steps = int(T*100)     # number of time steps
dt = T / num_steps # timestep size
print(dt)

# Create mesh
R1 = 0.5
a1 = 0.6
R2 = 0.5
a2 = 0.6
nx = int(25*(R1+a1)/R1)*2
ny = int(25*(R2+a2)/R2)*2
mesh = RectangleMesh(Point(-R1-a1,-R2-a2), Point(R1+a1,R2+a2), nx, ny)

P1 = FiniteElement('P', triangle, 1)
element = MixedElement([P1, P1, P1])
V = FunctionSpace(mesh, element)
W = FunctionSpace(mesh, 'P', 1)

# Define Test Functions
v_1, v_2, v_3 = TestFunctions(V)

# Define functions
u = Function(V)
u_n = Function(V)
u_nn = Function(V)

# Define boundary condition

def boundary(x, on_boundary):
    return on_boundary
    
u_D = Expression('0', degree=1)
#g = Expression('0', degree=2)

bc = DirichletBC(V.sub(0), u_D, boundary)

# Define initial value
#u_NN = Expression(('exp(-(x[0]*x[0])/18)*cos((-6/5)*x[0])','0'), degree=2)
u_NN = Expression(('0','0','0'), degree=1)
u_nn = interpolate(u_NN, V) # n-2
#u_N = Expression(('exp(-(x[0]*x[0])/18)*((1-(x[0]/(18/2))*dt)*cos((-6/5)*x[0]) + dt*(6/5)*sin((-6/5)*x[0]))','0'), degree=2,var=var, dt=dt)
u_N = Expression(('0','0','0'), degree=1)
u_n = interpolate(u_N, V) # n-1

#u_1 = u(0) + dt* u'(0)
#u_N = Expression('(x[0]/9)*exp(-(x[0]*x[0])/18)*cos((-6/5)*x[0]) - exp(-(x[0]*x[0])/18)*(6/5)*sin((-6/5)*x[0])', degree=1)

# Split system functions to access components
E, psi_1, psi_2 = split(u)
E_n, psi_n1, psi_n2 = split(u_n)
E_nn, psi_nn1, psi_nn2 = split(u_nn)

# Define expressions used in variationalproblem

# Define Theta-Function for PML
ctheta1 = 25
ctheta2 = 25
#theta_1 = Expression('-R-a < x[0] < -R || R < x[0] < R+a ? 1 : 0', degree=1, R=R, a=a)
#theta_2 = Expression('-R-a < x[0] < -R || R < x[0] < R+a ? 1 : 0', degree=1, R=R, a=a)
theta_1 = Expression('fabs(x[0])>R1 ? ( ctheta1*(((fabs(x[0])-R1)/a1)-((sin(2*pi*(fabs(x[0])-R1)/a1)))/(2*pi)) ) :0', degree=1, ctheta1=ctheta1, R1=R1, a1=a1)
theta_2 = Expression('fabs(x[1])>R2 ? ( ctheta2*(((fabs(x[1])-R2)/a2)-((sin(2*pi*(fabs(x[1])-R2)/a2)))/(2*pi)) ) :0', degree=1, ctheta2=ctheta2, R2=R2, a2=a2)

k = Constant(dt)

theta_n1 = Function(W)
theta_n1 = interpolate(theta_1, W)
theta_n2 = Function(W)
theta_n2 = interpolate(theta_2, W)

vtkfile_theta1 = File('PML2DWave/theta1.pvd')
vtkfile_theta1 << theta_n1
vtkfile_theta2 = File('PML2DWave/theta2.pvd')
vtkfile_theta2 << theta_n2

tolf=0.005
f = Expression('((fabs(x[0])<0+tolf) && (fabs(x[1])<0+tolf)) ? -(20)*pi*pi*((10)*t-1)*exp(-(pi*pi)*pow(((10)*t-1),2)) : 0', degree=1, tolf=tolf, t=0)

k = Constant(dt)

# Define variational problem

F = (1/(k*k))*(E-2*E_n+E_nn)*v_1*dx+(theta_1+theta_2)*(1/(2*k))*(E-E_nn)*v_1*dx+(theta_1*theta_2)*E*v_1*dx-f*v_1*dx+dot(grad(E),grad(v_1))*dx-psi_1.dx(0)*v_1*dx-psi_2.dx(1)*v_1*dx+(1/k)*(psi_1-psi_n1)*v_2*dx+theta_1*psi_1*v_2*dx-(theta_2-theta_1)*E.dx(0)*v_2*dx+(1/k)*(psi_2-psi_n2)*v_3*dx+theta_2*psi_2*v_3*dx-(theta_1-theta_2)*E.dx(1)*v_3*dx
#a, L = lhs(F), rhs(F)

vtkfile_E = File('PML2DWave/E.pvd')
vtkfile_psi1 = File('PML2DWave/psi1.pvd')
vtkfile_psi2 = File('PML2DWave/psi2.pvd')

u_val=np.zeros(int(num_steps-1))

# Time-stepping
t = dt

g = Expression('((x[0]>=-R1) && (x[0] <= R1)) && ((x[1]>=-R2) && (x[1] <= R2)) ? 1:0', degree=1, R2=R2, R1=R1)

m = 1
for n in range(num_steps-1):

    # Update current time
    t += dt
    f.t = t

    # Compute solution
    #u = Function(V)
    solve(F == 0, u, bc)

    # Plot solution
    if n == m*10:
        m += 1
        print(m)
    
        # Save solution to file (VTK)
        E, psi_1, psi_2 = u.split()
        E.rename("PML","PML")
        vtkfile_E << (E, t)
        vtkfile_psi1 << (psi_1, t)
        vtkfile_psi2 << (psi_2, t)
    
    
    if n==int((num_steps/3)):
        E, psi_1, psi_2 = split(u)
        E_n = project(g*E,W)
        
        u_norm1 = norm(E_n)
        #u_norm1 = np.linalg.norm(np.asarray(assemble(g*E*E*dx),1))
        
    if n==(num_steps-2):
        E, psi_1, psi_2 = split(u)
        E_n = project(g*E,W)
        u_norm2 = norm(E_n)
        
    # Update previous solution
    u_nn.assign(u_n)
    u_n.assign(u)
    
print('h='+str(float((R1+a1)/nx)))
print(u_norm2/u_norm1)
print('done')
plt.show()
